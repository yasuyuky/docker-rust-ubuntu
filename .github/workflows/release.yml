name: release

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rust-ubuntu

permissions: write-all

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      - name: Generate Dockerfile
        id: generate
        run: ./gen.sh Dockerfile.template
      - name: Commit files
        run: |
          git config --local user.email "yasuyuki.ymd@gmail.com"
          git config --local user.name "Yasuyuki YAMADA"
          git commit -a -m "[auto] Generate Dockerfile" || echo "no changes"
          git tag -f -a ${tag_name} -m "${tag_name} Tagged by CI" || echo "not tagged"
        env:
          tag_name: ${{ steps.generate.outputs.version }}
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
          tags: true
          branch: ${{ github.ref }}

  build-push:
    needs: release
    strategy:
      matrix:
        os: [focal, jammy, noble]
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            prefix: "x86_64"
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            prefix: "aarch64"
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
            prefix: "armv7"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v5
      - name: Generate Dockerfile
        id: generate
        run: ./gen.sh Dockerfile.template
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (base, single platform)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          build-args: dist=${{ matrix.os }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.os }}-${{ needs.release.outputs.version }}
      - name: Export digest
        run: echo ${{ steps.build.outputs.digest }} > base-${{ matrix.os }}-${{ matrix.prefix }}.digest
      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: base-${{ matrix.os }}-${{ matrix.prefix }}.digest
          path: base-${{ matrix.os }}-${{ matrix.prefix }}.digest
          retention-days: 1

  manifest-base:
    name: Assemble base manifest (${{ matrix.os }})
    needs: [release, build-push]
    strategy:
      matrix:
        os: [focal, jammy, noble]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download digest artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: base-*.digest
          merge-multiple: true
          path: digests
      - name: Create multi-arch manifest for ${{ matrix.os }}
        env:
          VER: ${{ needs.release.outputs.version }}
        run: |
          set -euo pipefail
          repo="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          os="${{ matrix.os }}"
          imgs=""
          for f in digests/base-${os}-*.digest; do
            [ -f "$f" ] || continue
            d=$(cat "$f")
            imgs="$imgs ${repo}@${d}"
          done
          if [ -n "$imgs" ]; then
            echo "Assembling ${repo}:${os}-${VER} from: $imgs"
            docker buildx imagetools create -t "${repo}:${os}-${VER}" $imgs
          else
            echo "No digests found for ${os}, skipping"
          fi

  build-tools:
    needs: [release, build-push, manifest-base]
    outputs:
      version: ${{ steps.generate-key.outputs.key }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build cargo-deb
        run: |
          docker run -m 4g --memory-swap 16g --oom-kill-disable --platform ${{ matrix.platform }} \
          -v$(pwd)/target/${{ matrix.platform }}:/work \
          ghcr.io/yasuyuky/rust-ubuntu:focal-${{ needs.release.outputs.version }} \
          cargo install --target-dir=/work cargo-deb
          sudo mkdir -p ${{ matrix.platform }}
          sudo cp target/${{ matrix.platform }}/release/cargo-deb ${{ matrix.platform }}
      - name: Build sccache
        run: |
          docker run -m 4g --memory-swap 16g --oom-kill-disable --platform ${{ matrix.platform }} \
          -v$(pwd)/target/${{ matrix.platform }}:/work \
          ghcr.io/yasuyuky/rust-ubuntu:focal-${{ needs.release.outputs.version }} \
          cargo install --target-dir=/work sccache
          sudo mkdir -p ${{ matrix.platform }}
          sudo cp target/${{ matrix.platform }}/release/sccache ${{ matrix.platform }}
      - name: Generate key name
        run: echo key=${{ matrix.platform }} | tr '/' '-' >>$GITHUB_OUTPUT
        id: generate-key
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate-key.outputs.key }}
          path: ${{ matrix.platform }}
          compression-level: 0

  install-tools:
    needs: [release, build-tools, manifest-base]
    strategy:
      matrix:
        os: [focal, jammy, noble]
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            prefix: "x86_64"
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            prefix: "aarch64"
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
            prefix: "armv7"
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          pattern: linux-*
          path: tools
      - name: Deploy tool files
        run: for n in $(ls -d tools/linux-*); do mkdir -p ${n//-/\/}; cp ${n}/* ${n//-/\/}; done
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push (final, single platform)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./tools
          push: true
          platforms: ${{ matrix.platform }}
          build-args: |
            dist=${{ matrix.os }}
            ver=${{ needs.release.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.os }}-${{ needs.release.outputs.version }}
      - name: Export digest
        run: echo ${{ steps.build.outputs.digest }} > final-${{ matrix.os }}-${{ matrix.prefix }}.digest
      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-${{ matrix.os }}-${{ matrix.prefix }}.digest
          path: final-${{ matrix.os }}-${{ matrix.prefix }}.digest
          retention-days: 1

  manifest-final:
    name: Assemble final manifests
    needs: [release, install-tools]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download digest artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: final-*.digest
          merge-multiple: true
          path: digests
      - name: Create multi-arch manifests for final images and aliases
        env:
          VER: ${{ needs.release.outputs.version }}
        run: |
          set -euo pipefail
          repo="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          # Per-dist tags
          for os in focal jammy noble; do
            imgs=""
            for f in digests/final-${os}-*.digest; do
              [ -f "$f" ] || continue
              d=$(cat "$f")
              imgs="$imgs ${repo}@${d}"
            done
            if [ -n "$imgs" ]; then
              echo "Assembling ${repo}:${os}-${VER} from: $imgs"
              docker buildx imagetools create -t "${repo}:${os}-${VER}" $imgs
            fi
          done
          # Focal aliases: latest and plain version tag
          focal_imgs=""
          for f in digests/final-focal-*.digest; do
            [ -f "$f" ] || continue
            d=$(cat "$f")
            focal_imgs="$focal_imgs ${repo}@${d}"
          done
          if [ -n "$focal_imgs" ]; then
            echo "Assembling aliases :latest and :${VER} from focal images"
            docker buildx imagetools create \
              -t "${repo}:latest" \
              -t "${repo}:${VER}" \
              $focal_imgs
          fi
