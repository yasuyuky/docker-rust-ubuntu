name: release

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rust-ubuntu

permissions: write-all

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate.outputs.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Generate Dockerfile
        id: generate
        run: ./gen.sh Dockerfile.template
      - name: Commit files
        run: |
          git config --local user.email "yasuyuki.ymd@gmail.com"
          git config --local user.name "Yasuyuki YAMADA"
          git commit -a -m "[auto] Generate Dockerfile" || echo "no changes"
          git tag -f -a ${tag_name} -m "${tag_name} Tagged by CI" || echo "not tagged"
        env:
          tag_name: ${{ steps.generate.outputs.version }}
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
          tags: true
          branch: ${{ github.ref }}

  build-push:
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os: [bionic, focal, jammy]
      max-parallel: 1
    steps:
      - uses: actions/checkout@v1
      - name: Generate Dockerfile
        id: generate
        run: ./gen.sh Dockerfile.template
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: dist=${{ matrix.os }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.os }}-${{ needs.release.outputs.version }}

  build-tools:
    runs-on: ubuntu-latest
    needs: [release, build-push]
    outputs:
      version: ${{ steps.generate-key.outputs.key }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Build sccache
        run: |
          docker run -m 8GB --platform ${{ matrix.platform }} \
          --mount=type=tmpfs,target=/usr/local/cargo/registry/ \
          -v$(pwd)/${{ matrix.platform }}:/work \
          ghcr.io/yasuyuky/rust-ubuntu:bionic-${{ needs.release.outputs.version }} \
          cargo install --target-dir=/work sccache
      - name: Build cargo-deb
        run: |
          docker run -m 8GB --platform ${{ matrix.platform }} \
          --mount=type=tmpfs,target=/usr/local/cargo/registry/ \
          -v$(pwd)/${{ matrix.platform }}:/work \
          ghcr.io/yasuyuky/rust-ubuntu:bionic-${{ needs.release.outputs.version }} \
          cargo install --target-dir=/work cargo-deb
      - name: Generate key name
        run: echo key=${{ matrix.platform }} | tr '/' '-' >>$GITHUB_OUTPUT
        id: generate-key
      - name: Clean up output files
        run: sudo find ${{ matrix.platform }} ! -name 'sccache' ! -name 'cargo-deb' -delete
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.generate-key.outputs.key }}
          path: ${{ matrix.platform }}

  install-tools:
    runs-on: ubuntu-latest
    needs: [release, build-tools]
    strategy:
      matrix:
        os: [bionic, focal, jammy]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v3
        with:
          path: tools
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: tools
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: dist=${{ matrix.os }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ matrix.os }}-${{ needs.release.outputs.version }}
      - name: Build and push latest if bionic
        uses: docker/build-push-action@v3
        with:
          context: tools
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: dist=${{ matrix.os }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
        if: ${{ matrix.os == 'bionic' }}
